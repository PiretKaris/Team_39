Discuss and find information about clean architecture.

Summary of common software architecture types:

Layered (N-Tier) Architecture - remains the most common and widely 
  adopted architecture due to its simplicity, familiarity, and effectiveness in managing complex software systems.
Microservices Architecture 
Monolithic Architecture
Client-Server Architecture
Event-Driven Architecture


1. **What's the importance of each layer?**

Clean Architecture, a concept introduced by Robert C. Martin (also known as Uncle Bob), is a design philosophy and set of principles 
intended to create systems that are maintainable, testable, and scalable. 
It emphasizes separating the concerns of the application into distinct layers, each with specific responsibilities.

‚ú® Key Components of Clean Architecture:
- Domain Layer: Contains the business logic and entities. It‚Äôs the innermost layer with no dependencies on other layers.
- Application Layer: Contains application logic and defines interfaces for the outer layers. It depends on the Domain layer
but not directly on Presentation or Infrastructure layers.
- Infrastructure Layer: Implements interfaces from the Application layer, dealing with data access, file systems, network, etc.
- Presentation Layer (UI): The outermost layer, interacting with the Application layer and displaying information to the user.

‚ú® Application Layer (Application-Specific Business Logic)
- The Application Layer contains application-specific logic. It orchestrates how the domain objects are used to perform specific tasks
pertinent to the application. It does not contain business rules (those belong in the Domain Layer), but it does contain application logic, 
which can be thought of as a higher-level policy, orchestrating how the domain objects work together to perform tasks needed by the application.
- Use Cases/Commands/Queries: These represent and encapsulate all of the use cases of the system.
- DTOs (Data Transfer Objects): Objects that carry data between processes, in order to reduce the number of method calls, for example.
- Interfaces/Services: Abstractions for outer layers (like Infrastructure or Presentation) to implement.

‚ú® Domain Layer (Core Business Logic)
!!! The Domain Layer is the heart of the business logic. It encapsulates the fundamental business rules and how the business
entities interact with each other. It‚Äôs the most stable part of the application, least likely to change when something external changes.
In the ProductPolicy class, you would typically implement business rules that are core to the product domain. For example:
Checking if a customer is eligible to submit a review (based on purchase history or other business rules).
Validating if the product meets certain conditions before it can be listed or reviewed.

‚ú® Infrastructure Layer
The Application Layer defines interfaces (like IProductRepository or IReviewRepository) that abstract the operations 
needed by the application. The Infrastructure Layer provides concrete implementations of these interfaces.
This layer is responsible for the technical concerns of the application, such as:
Data persistence (e.g., databases).
File system interactions.
Network communication (e.g., external API calls).
Any other infrastructure concerns (e.g., caching, logging).

‚ú® Benefits of Clean Architecture Approach
Decoupling from Core Logic: By isolating infrastructure concerns from the core business logic, the Domain and 
Application layers can focus on business rules and application-specific logic without being affected by infrastructure details.
Interchangeability: You can change the implementations in the Infrastructure Layer 
(like switching databases or integrating a different third-party service) with minimal impact on the rest of the application, 
as long as the interfaces remain consistent.
Testability: It‚Äôs easier to test the Application and Domain layers by mocking the interfaces that are implemented
in the Infrastructure Layer. This allows you to write unit tests that are not dependent on actual databases or external services.


2. **Why is there needed some kind of structure and architecture?**

‚ú® Testability
A well-structured architecture makes the system easier to test. By decoupling components and enforcing boundaries, 
it becomes simpler to write unit tests for individual parts of the system without needing to rely on external dependencies. 
This isolation allows for more thorough and reliable testing.

‚ú® Flexibility and Maintainability
A clear structure helps in adapting to changes. When the architecture is well-defined, it's easier to locate and modify 
the parts of the system that need to change. This is crucial in a constantly evolving software environment where requirements and 
technologies change frequently.

‚ú® Reusability
Structured architecture promotes the reuse of components. By designing components to be independent and loosely coupled, 
they can be reused in different parts of the system or even in different projects. This reduces redundancy and accelerates development.

‚ú® Scalability
As a system grows, a solid architecture allows it to scale more easily. With a clear structure, adding new features or handling 
increased loads can be done more efficiently without causing a ripple effect of issues throughout the system.

‚ú® Communication and Understanding
A well-defined architecture acts as a common language among team members, making it easier for them to understand the system's design 
and purpose. It helps new developers get up to speed quickly and ensures that everyone is on the same page regarding the system's 
structure and how different components interact.

3.**Find other architecture types, figure out pros and cons.**

‚ú® Layered (N-tier) Architecture ‚ú®

‚ö° Pros
+ Separation of Concerns: Each layer has a distinct responsibility, which makes the system easier to manage and understand.
+ Ease of Development and Maintenance: Layers can be developed and updated independently.

üñåÔ∏è Cons
- Performance: Multiple layers can introduce latency and reduce performance.
- Rigidity: Changes in one layer might require changes in other layers, making the system less flexible.

‚ú® Microservices Architecture ‚ú®

‚ö° Pros
+ Scalability: Services can be scaled independently.
+ Flexibility in Technology: Each service can use different technology stacks.
+ Fault Isolation: Failures in one service do not affect others.

üñåÔ∏è Cons
- Complexity: Managing multiple services can be complex.
- Deployment Challenges: Requires sophisticated deployment and monitoring mechanisms.
- Data Management: Handling distributed data and maintaining consistency can be challenging.

‚ú® Event-Driven Architecture ‚ú®

‚ö° Pros
+ Asynchronous Communication: Decouples producers and consumers, improving scalability and flexibility.
+ Real-time Processing: Ideal for real-time analytics and monitoring.

üñåÔ∏è Cons
- Complexity: Designing and managing event-driven systems can be complex.
- Debugging: Tracing events across the system can be difficult.

‚ú® Serverless Architecture ‚ú®

‚ö° Pros
+ Cost-Efficiency: Pay only for the actual compute time used.
+ Scalability: Automatically scales with the load.
+ Reduced Maintenance: No server management required.

üñåÔ∏è Cons
- Cold Start Latency: Initial requests can have higher latency.
- Limited Execution Time: Functions have execution time limits, which might not be suitable for long-running tasks.
- Vendor Lock-In: Tightly coupled with cloud provider's services.

‚ú® Hexagonal Architecture (Ports and Adapters) ‚ú®

‚ö° Pros
+ Decoupling: Encourages separation between the core logic and external systems.
+ Flexibility: Adapters can be easily swapped without affecting the core logic.

üñåÔ∏è Cons
- Complexity: Can introduce complexity due to the need for multiple adapters.
- Learning Curve: Might be harder to understand and implement for those unfamiliar with the concept.

‚ú®  CQRS (Command Query Responsibility Segregation) ‚ú®

‚ö° Pros
+ Performance: Optimizes read and write operations separately.
+ Scalability: Read and write workloads can be scaled independently.

üñåÔ∏è Cons
- Complexity: Adds complexity to the system design.
- Consistency: Ensuring data consistency between the command and query models can be challenging.
